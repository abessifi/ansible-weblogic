---

#
# Prepare the operating system to the installation
#

- name: RedHat | Install required packages
  yum:
    name: "{{ item }}"
    state: present
  with_items: rh.packages_depends
  when: ansible_os_family == 'RedHat'

- name: RedHat | Disabling SELinux
  selinux:
    state: disabled
  when: ansible_os_family == 'RedHat'

- name: RedHat | Disable firewall deamon (firewalld)
  service: name=firewalld state=stopped enabled=no
  when: ansible_os_family == 'RedHat'

- name: Change kernel parameters
  sysctl:
    name: "{{ item.key }}"
    value: "{{ item.value }}"
    state: present
  with_dict: kernel_params

- name: Create weblogic group
  group:
    name: "{{ weblogic.group }}"
    state: present

- name: Create weblogic user
  user:
    name: "{{ weblogic.user }}"
    group: "{{ weblogic.group }}"
    home: "{{ weblogic.home_dir }}"
    createhome: no
    shell: '/bin/bash'
    state: present

- name: Add open file limits for weblogic user
  lineinfile:
    dest: '/etc/security/limits.d/99-nofile.conf'
    line: "{{ weblogic.user }} {{ item.key }} {{ item.value }}"
    create: yes
  with_items: sys_ulimits.nofile

- name: Add open process limits for weblogic user
  lineinfile:
    dest: '/etc/security/limits.d/99-nproc.conf'
    line: "{{ weblogic.user }} {{ item.key }} {{ item.value }}"
    create: yes
  with_items: sys_ulimits.nproc

# TODO: Check if limits need to be set when opening a shell session.
# - name: Create a shell profile with file and process limits for weblogic user
#   template:
#     src: oracle-limits.sh
#     dest: '/etc/profile.d/'

- name: Create Oracle Inventory directory
  file:
    path: "{{ oracle.inventory_path }}"
    state: directory
    owner: "{{ weblogic.user }}"
    group: "{{ weblogic.group }}"

- name: Prepare oracle inventory parameters
  template:
    src: oraInst.loc.j2
    dest: "/etc/oraInst.loc"

- name: Create download directory
  file:
    path: "{{ weblogic.download_dir }}"
    state: directory

- set_fact:
    weblogic_jar_file: "{{ weblogic_jar_url|basename }}"

- name: Check if the installation Jar file exists already
  stat:
    path: "{{ weblogic.download_dir }}/{{ weblogic_jar_file }}"
  register: install_jar

- name: Download the installation Jar file
  uri:
    url: "{{ weblogic_jar_url }}"
    dest: "{{ weblogic.download_dir }}"
  when: not install_jar.stat.exists

- name: Set installation Jar file permissions
  file:
    path: "{{ weblogic.download_dir }}/{{ weblogic_jar_file }}"
    owner: "{{ weblogic.user }}"
    group: "{{ weblogic.group }}"

- name: Remove existing oracle home directory
  file:
    path: "{{ oracle.home_dir }}"
    state: absent
  when: weblogic_force_installation
